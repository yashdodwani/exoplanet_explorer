<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="# Use an official Python base image&#10;FROM python:3.12-slim&#10;&#10;# Set environment variables&#10;ENV PYTHONDONTWRITEBYTECODE 1&#10;ENV PYTHONUNBUFFERED 1&#10;&#10;# Set work directory&#10;WORKDIR /app&#10;&#10;# Install system dependencies&#10;RUN apt-get update &amp;&amp; apt-get install -y build-essential nginx supervisor &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Copy requirements and install&#10;COPY requirements.txt ./&#10;RUN pip install --upgrade pip &amp;&amp; pip install -r requirements.txt&#10;&#10;# Copy all project files&#10;COPY . .&#10;&#10;# Copy nginx and supervisor configs&#10;COPY nginx.conf /etc/nginx/nginx.conf&#10;COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf&#10;&#10;# Expose nginx port&#10;EXPOSE 80&#10;&#10;# Remove old CMD, use supervisor to start all services&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-c&quot;, &quot;/etc/supervisor/conf.d/supervisord.conf&quot;]&#10;" />
              <option name="updatedContent" value="# Use an official Python base image&#10;FROM python:3.12-slim&#10;&#10;# Set environment variables&#10;ENV PYTHONDONTWRITEBYTECODE 1&#10;ENV PYTHONUNBUFFERED 1&#10;&#10;# Set work directory&#10;WORKDIR /app&#10;&#10;# Install system dependencies&#10;RUN apt-get update &amp;&amp; apt-get install -y build-essential nginx supervisor &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Copy requirements and install&#10;COPY requirements.txt ./&#10;RUN pip install --upgrade pip &amp;&amp; pip install -r requirements.txt&#10;&#10;# Copy all project files&#10;COPY . .&#10;&#10;# Copy nginx and supervisor configs&#10;COPY nginx.conf /etc/nginx/nginx.conf&#10;COPY supervisord.conf /etc/supervisor/supervisord.conf&#10;&#10;# Expose nginx port&#10;EXPOSE 80&#10;&#10;# Remove old CMD, use supervisor to start all services&#10;CMD [&quot;/usr/bin/supervisord&quot;, &quot;-c&quot;, &quot;/etc/supervisor/conf.d/supervisord.conf&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend.py" />
              <option name="originalContent" value="import streamlit as st&#10;import pandas as pd&#10;import requests&#10;import io&#10;st.cache_data.clear()&#10;st.set_page_config(page_title=&quot;Exoplanet Explorer&quot;, layout=&quot;centered&quot;, page_icon=&quot;&quot;, initial_sidebar_state=&quot;auto&quot;)&#10;&#10;st.markdown(&#10;    &quot;&quot;&quot;&#10;    &lt;style&gt;&#10;    body {&#10;        background-color: #181825;&#10;        color: #e0e0e0;&#10;    }&#10;    .stApp {&#10;        background-color: #181825;&#10;    }&#10;    .css-1d391kg, .css-1v0mbdj, .css-1cpxqw2, .css-1offfwp, .css-1q8dd3e, .css-1lcbmhc {&#10;        background-color: #232136 !important;&#10;        color: #e0e0e0 !important;&#10;    }&#10;    .stButton&gt;button {&#10;        color: #fff;&#10;        background: linear-gradient(90deg, #7f5af0 0%, #232136 100%);&#10;        border: none;&#10;        border-radius: 8px;&#10;        padding: 0.5em 2em;&#10;        font-weight: bold;&#10;    }&#10;    .stFileUploader&gt;div&gt;div {&#10;        background: #232136;&#10;        color: #e0e0e0;&#10;    }&#10;    &lt;/style&gt;&#10;    &quot;&quot;&quot;,&#10;    unsafe_allow_html=True&#10;)&#10;&#10;st.title(&quot; Exoplanet Explorer&quot;)&#10;&#10;st.markdown(&quot;&quot;&quot;&#10;Upload a CSV file or enter the features for a single exoplanet candidate below to predict its disposition (CONFIRMED, CANDIDATE, FALSE POSITIVE).&#10;&quot;&quot;&quot;)&#10;&#10;API_URL = &quot;http://localhost:8000&quot;&#10;&#10;with st.expander(&quot; Predict for a single exoplanet candidate&quot;):&#10;    with st.form(&quot;single_form&quot;):&#10;        # All features except koi_disposition and relative error columns&#10;        koi_score = st.number_input(&quot;koi_score&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_period = st.number_input(&quot;koi_period&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_eccen = st.number_input(&quot;koi_eccen&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_impact = st.number_input(&quot;koi_impact&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_duration = st.number_input(&quot;koi_duration&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_depth = st.number_input(&quot;koi_depth&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_ror = st.number_input(&quot;koi_ror&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_srho = st.number_input(&quot;koi_srho&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_incl = st.number_input(&quot;koi_incl&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_teq = st.number_input(&quot;koi_teq&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_insol = st.number_input(&quot;koi_insol&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_dor = st.number_input(&quot;koi_dor&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_model_snr = st.number_input(&quot;koi_model_snr&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_count = st.number_input(&quot;koi_count&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_num_transits = st.number_input(&quot;koi_num_transits&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_steff = st.number_input(&quot;koi_steff&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_slogg = st.number_input(&quot;koi_slogg&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_smet = st.number_input(&quot;koi_smet&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_smass = st.number_input(&quot;koi_smass&quot;, value=0.0, format=&quot;%f&quot;)&#10;        ra = st.number_input(&quot;ra&quot;, value=0.0, format=&quot;%f&quot;)&#10;        dec = st.number_input(&quot;dec&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_kepmag = st.number_input(&quot;koi_kepmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_gmag = st.number_input(&quot;koi_gmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_rmag = st.number_input(&quot;koi_rmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_imag = st.number_input(&quot;koi_imag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_zmag = st.number_input(&quot;koi_zmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_jmag = st.number_input(&quot;koi_jmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_hmag = st.number_input(&quot;koi_hmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_kmag = st.number_input(&quot;koi_kmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        loc_rowid = st.number_input(&quot;loc_rowid&quot;, value=0.0, format=&quot;%f&quot;)&#10;        st_pmra = st.number_input(&quot;st_pmra&quot;, value=0.0, format=&quot;%f&quot;)&#10;        st_pmdec = st.number_input(&quot;st_pmdec&quot;, value=0.0, format=&quot;%f&quot;)&#10;        pl_tranmid = st.number_input(&quot;pl_tranmid&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_prad = st.number_input(&quot;koi_prad&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_tmag = st.number_input(&quot;koi_tmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        st_dist = st.number_input(&quot;st_dist&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_srad = st.number_input(&quot;koi_srad&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_fittype_LS_MCMC = st.number_input(&quot;koi_fittype_LS_MCMC&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_fittype_MCMC = st.number_input(&quot;koi_fittype_MCMC&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_fittype_none = st.number_input(&quot;koi_fittype_none&quot;, value=0.0, format=&quot;%f&quot;)&#10;        submitted = st.form_submit_button(&quot;Predict&quot;)&#10;        if submitted:&#10;            payload = {&#10;                &quot;koi_score&quot;: koi_score,&#10;                &quot;koi_period&quot;: koi_period,&#10;                &quot;koi_eccen&quot;: koi_eccen,&#10;                &quot;koi_impact&quot;: koi_impact,&#10;                &quot;koi_duration&quot;: koi_duration,&#10;                &quot;koi_depth&quot;: koi_depth,&#10;                &quot;koi_ror&quot;: koi_ror,&#10;                &quot;koi_srho&quot;: koi_srho,&#10;                &quot;koi_incl&quot;: koi_incl,&#10;                &quot;koi_teq&quot;: koi_teq,&#10;                &quot;koi_insol&quot;: koi_insol,&#10;                &quot;koi_dor&quot;: koi_dor,&#10;                &quot;koi_model_snr&quot;: koi_model_snr,&#10;                &quot;koi_count&quot;: koi_count,&#10;                &quot;koi_num_transits&quot;: koi_num_transits,&#10;                &quot;koi_steff&quot;: koi_steff,&#10;                &quot;koi_slogg&quot;: koi_slogg,&#10;                &quot;koi_smet&quot;: koi_smet,&#10;                &quot;koi_smass&quot;: koi_smass,&#10;                &quot;ra&quot;: ra,&#10;                &quot;dec&quot;: dec,&#10;                &quot;koi_kepmag&quot;: koi_kepmag,&#10;                &quot;koi_gmag&quot;: koi_gmag,&#10;                &quot;koi_rmag&quot;: koi_rmag,&#10;                &quot;koi_imag&quot;: koi_imag,&#10;                &quot;koi_zmag&quot;: koi_zmag,&#10;                &quot;koi_jmag&quot;: koi_jmag,&#10;                &quot;koi_hmag&quot;: koi_hmag,&#10;                &quot;koi_kmag&quot;: koi_kmag,&#10;                &quot;loc_rowid&quot;: loc_rowid,&#10;                &quot;st_pmra&quot;: st_pmra,&#10;                &quot;st_pmdec&quot;: st_pmdec,&#10;                &quot;pl_tranmid&quot;: pl_tranmid,&#10;                &quot;koi_prad&quot;: koi_prad,&#10;                &quot;koi_tmag&quot;: koi_tmag,&#10;                &quot;st_dist&quot;: st_dist,&#10;                &quot;koi_srad&quot;: koi_srad,&#10;                &quot;koi_fittype_LS_MCMC&quot;: koi_fittype_LS_MCMC,&#10;                &quot;koi_fittype_MCMC&quot;: koi_fittype_MCMC,&#10;                &quot;koi_fittype_none&quot;: koi_fittype_none&#10;            }&#10;            try:&#10;                response = requests.post(f&quot;{API_URL}/predict&quot;, json=payload)&#10;                if response.status_code == 200:&#10;                    st.success(f&quot;Prediction: {response.json()['prediction']}&quot;)&#10;                else:&#10;                    st.error(f&quot;Error: {response.text}&quot;)&#10;            except Exception as e:&#10;                st.error(f&quot;Request failed: {e}&quot;)&#10;&#10;st.markdown(&quot;---&quot;)&#10;&#10;with st.expander(&quot; Predict for a batch (CSV upload)&quot;):&#10;    uploaded_file = st.file_uploader(&quot;Upload CSV file with the required columns&quot;, type=[&quot;csv&quot;])&#10;    if uploaded_file is not None:&#10;        if st.button(&quot;Predict for CSV&quot;):&#10;            try:&#10;                files = {&quot;file&quot;: uploaded_file.getvalue()}&#10;                response = requests.post(f&quot;{API_URL}/predict_csv&quot;, files={&quot;file&quot;: (uploaded_file.name, uploaded_file, &quot;text/csv&quot;)})&#10;                if response.status_code == 200:&#10;                    st.success(&quot;Prediction complete! Download your results below.&quot;)&#10;                    st.download_button(&#10;                        label=&quot;Download Predicted CSV&quot;,&#10;                        data=response.content,&#10;                        file_name=&quot;predicted_exoplanets.csv&quot;,&#10;                        mime=&quot;text/csv&quot;&#10;                    )&#10;                else:&#10;                    st.error(f&quot;Error: {response.text}&quot;)&#10;            except Exception as e:&#10;                st.error(f&quot;Request failed: {e}&quot;)&#10;&#10;st.markdown(&quot;&quot;&quot;&#10;&lt;style&gt;&#10;footer {visibility: hidden;}&#10;&lt;/style&gt;&#10;&quot;&quot;&quot;, unsafe_allow_html=True)&#10;&#10;" />
              <option name="updatedContent" value="import streamlit as st&#10;import pandas as pd&#10;import requests&#10;import io&#10;st.cache_data.clear()&#10;st.set_page_config(page_title=&quot;Exoplanet Explorer&quot;, layout=&quot;centered&quot;, page_icon=&quot;&quot;, initial_sidebar_state=&quot;auto&quot;)&#10;&#10;st.markdown(&#10;    &quot;&quot;&quot;&#10;    &lt;style&gt;&#10;    body {&#10;        background-color: #181825;&#10;        color: #e0e0e0;&#10;    }&#10;    .stApp {&#10;        background-color: #181825;&#10;    }&#10;    .css-1d391kg, .css-1v0mbdj, .css-1cpxqw2, .css-1offfwp, .css-1q8dd3e, .css-1lcbmhc {&#10;        background-color: #232136 !important;&#10;        color: #e0e0e0 !important;&#10;    }&#10;    .stButton&gt;button {&#10;        color: #fff;&#10;        background: linear-gradient(90deg, #7f5af0 0%, #232136 100%);&#10;        border: none;&#10;        border-radius: 8px;&#10;        padding: 0.5em 2em;&#10;        font-weight: bold;&#10;    }&#10;    .stFileUploader&gt;div&gt;div {&#10;        background: #232136;&#10;        color: #e0e0e0;&#10;    }&#10;    &lt;/style&gt;&#10;    &quot;&quot;&quot;,&#10;    unsafe_allow_html=True&#10;)&#10;&#10;st.title(&quot; Exoplanet Explorer&quot;)&#10;&#10;st.markdown(&quot;&quot;&quot;&#10;Upload a CSV file or enter the features for a single exoplanet candidate below to predict its disposition (CONFIRMED, CANDIDATE, FALSE POSITIVE).&#10;&quot;&quot;&quot;)&#10;&#10;API_URL = &quot;/api&quot;&#10;&#10;with st.expander(&quot; Predict for a single exoplanet candidate&quot;):&#10;    with st.form(&quot;single_form&quot;):&#10;        # All features except koi_disposition and relative error columns&#10;        koi_score = st.number_input(&quot;koi_score&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_period = st.number_input(&quot;koi_period&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_eccen = st.number_input(&quot;koi_eccen&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_impact = st.number_input(&quot;koi_impact&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_duration = st.number_input(&quot;koi_duration&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_depth = st.number_input(&quot;koi_depth&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_ror = st.number_input(&quot;koi_ror&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_srho = st.number_input(&quot;koi_srho&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_incl = st.number_input(&quot;koi_incl&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_teq = st.number_input(&quot;koi_teq&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_insol = st.number_input(&quot;koi_insol&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_dor = st.number_input(&quot;koi_dor&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_model_snr = st.number_input(&quot;koi_model_snr&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_count = st.number_input(&quot;koi_count&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_num_transits = st.number_input(&quot;koi_num_transits&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_steff = st.number_input(&quot;koi_steff&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_slogg = st.number_input(&quot;koi_slogg&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_smet = st.number_input(&quot;koi_smet&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_smass = st.number_input(&quot;koi_smass&quot;, value=0.0, format=&quot;%f&quot;)&#10;        ra = st.number_input(&quot;ra&quot;, value=0.0, format=&quot;%f&quot;)&#10;        dec = st.number_input(&quot;dec&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_kepmag = st.number_input(&quot;koi_kepmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_gmag = st.number_input(&quot;koi_gmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_rmag = st.number_input(&quot;koi_rmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_imag = st.number_input(&quot;koi_imag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_zmag = st.number_input(&quot;koi_zmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_jmag = st.number_input(&quot;koi_jmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_hmag = st.number_input(&quot;koi_hmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_kmag = st.number_input(&quot;koi_kmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        loc_rowid = st.number_input(&quot;loc_rowid&quot;, value=0.0, format=&quot;%f&quot;)&#10;        st_pmra = st.number_input(&quot;st_pmra&quot;, value=0.0, format=&quot;%f&quot;)&#10;        st_pmdec = st.number_input(&quot;st_pmdec&quot;, value=0.0, format=&quot;%f&quot;)&#10;        pl_tranmid = st.number_input(&quot;pl_tranmid&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_prad = st.number_input(&quot;koi_prad&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_tmag = st.number_input(&quot;koi_tmag&quot;, value=0.0, format=&quot;%f&quot;)&#10;        st_dist = st.number_input(&quot;st_dist&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_srad = st.number_input(&quot;koi_srad&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_fittype_LS_MCMC = st.number_input(&quot;koi_fittype_LS_MCMC&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_fittype_MCMC = st.number_input(&quot;koi_fittype_MCMC&quot;, value=0.0, format=&quot;%f&quot;)&#10;        koi_fittype_none = st.number_input(&quot;koi_fittype_none&quot;, value=0.0, format=&quot;%f&quot;)&#10;        submitted = st.form_submit_button(&quot;Predict&quot;)&#10;        if submitted:&#10;            payload = {&#10;                &quot;koi_score&quot;: koi_score,&#10;                &quot;koi_period&quot;: koi_period,&#10;                &quot;koi_eccen&quot;: koi_eccen,&#10;                &quot;koi_impact&quot;: koi_impact,&#10;                &quot;koi_duration&quot;: koi_duration,&#10;                &quot;koi_depth&quot;: koi_depth,&#10;                &quot;koi_ror&quot;: koi_ror,&#10;                &quot;koi_srho&quot;: koi_srho,&#10;                &quot;koi_incl&quot;: koi_incl,&#10;                &quot;koi_teq&quot;: koi_teq,&#10;                &quot;koi_insol&quot;: koi_insol,&#10;                &quot;koi_dor&quot;: koi_dor,&#10;                &quot;koi_model_snr&quot;: koi_model_snr,&#10;                &quot;koi_count&quot;: koi_count,&#10;                &quot;koi_num_transits&quot;: koi_num_transits,&#10;                &quot;koi_steff&quot;: koi_steff,&#10;                &quot;koi_slogg&quot;: koi_slogg,&#10;                &quot;koi_smet&quot;: koi_smet,&#10;                &quot;koi_smass&quot;: koi_smass,&#10;                &quot;ra&quot;: ra,&#10;                &quot;dec&quot;: dec,&#10;                &quot;koi_kepmag&quot;: koi_kepmag,&#10;                &quot;koi_gmag&quot;: koi_gmag,&#10;                &quot;koi_rmag&quot;: koi_rmag,&#10;                &quot;koi_imag&quot;: koi_imag,&#10;                &quot;koi_zmag&quot;: koi_zmag,&#10;                &quot;koi_jmag&quot;: koi_jmag,&#10;                &quot;koi_hmag&quot;: koi_hmag,&#10;                &quot;koi_kmag&quot;: koi_kmag,&#10;                &quot;loc_rowid&quot;: loc_rowid,&#10;                &quot;st_pmra&quot;: st_pmra,&#10;                &quot;st_pmdec&quot;: st_pmdec,&#10;                &quot;pl_tranmid&quot;: pl_tranmid,&#10;                &quot;koi_prad&quot;: koi_prad,&#10;                &quot;koi_tmag&quot;: koi_tmag,&#10;                &quot;st_dist&quot;: st_dist,&#10;                &quot;koi_srad&quot;: koi_srad,&#10;                &quot;koi_fittype_LS_MCMC&quot;: koi_fittype_LS_MCMC,&#10;                &quot;koi_fittype_MCMC&quot;: koi_fittype_MCMC,&#10;                &quot;koi_fittype_none&quot;: koi_fittype_none&#10;            }&#10;            try:&#10;                response = requests.post(f&quot;{API_URL}/predict&quot;, json=payload)&#10;                if response.status_code == 200:&#10;                    st.success(f&quot;Prediction: {response.json()['prediction']}&quot;)&#10;                else:&#10;                    st.error(f&quot;Error: {response.text}&quot;)&#10;            except Exception as e:&#10;                st.error(f&quot;Request failed: {e}&quot;)&#10;&#10;st.markdown(&quot;---&quot;)&#10;&#10;with st.expander(&quot; Predict for a batch (CSV upload)&quot;):&#10;    uploaded_file = st.file_uploader(&quot;Upload CSV file with the required columns&quot;, type=[&quot;csv&quot;])&#10;    if uploaded_file is not None:&#10;        if st.button(&quot;Predict for CSV&quot;):&#10;            try:&#10;                files = {&quot;file&quot;: uploaded_file.getvalue()}&#10;                response = requests.post(f&quot;{API_URL}/predict_csv&quot;, files={&quot;file&quot;: (uploaded_file.name, uploaded_file, &quot;text/csv&quot;)})&#10;                if response.status_code == 200:&#10;                    st.success(&quot;Prediction complete! Download your results below.&quot;)&#10;                    st.download_button(&#10;                        label=&quot;Download Predicted CSV&quot;,&#10;                        data=response.content,&#10;                        file_name=&quot;predicted_exoplanets.csv&quot;,&#10;                        mime=&quot;text/csv&quot;&#10;                    )&#10;                else:&#10;                    st.error(f&quot;Error: {response.text}&quot;)&#10;            except Exception as e:&#10;                st.error(f&quot;Request failed: {e}&quot;)&#10;&#10;st.markdown(&quot;&quot;&quot;&#10;&lt;style&gt;&#10;footer {visibility: hidden;}&#10;&lt;/style&gt;&#10;&quot;&quot;&quot;, unsafe_allow_html=True)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/nginx.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/nginx.conf" />
              <option name="updatedContent" value="server {&#10;    listen 80;&#10;    server_name _;&#10;&#10;    # Proxy /api/* to FastAPI&#10;    location /api/ {&#10;        proxy_pass http://127.0.0.1:8000/;&#10;        proxy_set_header Host $host;&#10;        proxy_set_header X-Real-IP $remote_addr;&#10;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;        proxy_set_header X-Forwarded-Proto $scheme;&#10;    }&#10;&#10;    # Everything else to Streamlit&#10;    location / {&#10;        proxy_pass http://127.0.0.1:8501/;&#10;        proxy_set_header Host $host;&#10;        proxy_set_header X-Real-IP $remote_addr;&#10;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;        proxy_set_header X-Forwarded-Proto $scheme;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/supervisord.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/supervisord.conf" />
              <option name="updatedContent" value="[supervisord]&#10;nodaemon=true&#10;&#10;[program:fastapi]&#10;command=uvicorn main:app --host 0.0.0.0 --port 8000&#10;directory=/app&#10;autostart=true&#10;autorestart=true&#10;stdout_logfile=/dev/stdout&#10;stderr_logfile=/dev/stderr&#10;&#10;[program:streamlit]&#10;command=streamlit run frontend.py --server.port 8501 --server.address 0.0.0.0&#10;directory=/app&#10;autostart=true&#10;autorestart=true&#10;stdout_logfile=/dev/stdout&#10;stderr_logfile=/dev/stderr&#10;&#10;[program:nginx]&#10;command=nginx -g 'daemon off;' -c /etc/nginx/nginx.conf&#10;autostart=true&#10;autorestart=true&#10;stdout_logfile=/dev/stdout&#10;stderr_logfile=/dev/stderr&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_model.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_model.py" />
              <option name="updatedContent" value="import pytest&#10;import joblib&#10;import numpy as np&#10;import pandas as pd&#10;&#10;# Load model and label encoder&#10;model = joblib.load(&quot;LightGBM_exoplanet_model.pkl&quot;)&#10;le = joblib.load(&quot;label_encoder.pkl&quot;)&#10;features = joblib.load(&quot;features.pkl&quot;)&#10;&#10;def test_model_on_custom_input():&#10;    # Example custom input (fill with realistic values or zeros for demo)&#10;    custom_input = {&#10;        'koi_score': 0.5,&#10;        'koi_period': 1.0,&#10;        'koi_eccen': 0.0,&#10;        'koi_impact': 0.1,&#10;        'koi_duration': 2.0,&#10;        'koi_depth': 0.01,&#10;        'koi_ror': 0.2,&#10;        'koi_srho': 1.0,&#10;        'koi_incl': 89.0,&#10;        'koi_teq': 500.0,&#10;        'koi_insol': 1.0,&#10;        'koi_dor': 10.0,&#10;        'koi_model_snr': 20.0,&#10;        'koi_count': 1.0,&#10;        'koi_num_transits': 3.0,&#10;        'koi_steff': 5700.0,&#10;        'koi_slogg': 4.4,&#10;        'koi_smet': 0.0,&#10;        'koi_smass': 1.0,&#10;        'ra': 290.0,&#10;        'dec': 44.0,&#10;        'koi_kepmag': 12.0,&#10;        'koi_gmag': 13.0,&#10;        'koi_rmag': 13.0,&#10;        'koi_imag': 13.0,&#10;        'koi_zmag': 13.0,&#10;        'koi_jmag': 12.0,&#10;        'koi_hmag': 12.0,&#10;        'koi_kmag': 12.0,&#10;        'loc_rowid': 1.0,&#10;        'st_pmra': 0.0,&#10;        'st_pmdec': 0.0,&#10;        'pl_tranmid': 0.0,&#10;        'koi_prad': 1.0,&#10;        'koi_tmag': 12.0,&#10;        'st_dist': 100.0,&#10;        'koi_srad': 1.0,&#10;        'Relative_Error_PLANET_ORBPER': 0.0,&#10;        'Relative_Error_PLANET_RADE': 0.0,&#10;        'Relative_Error_PLANET_TRANDEP': 0.0,&#10;        'Relative_Error_PLANET_TRANDURH': 0.0,&#10;        'Relative_Error_PLANET_TRANMID': 0.0,&#10;        'Relative_Error_STAR_DIST': 0.0,&#10;        'Relative_Error_STAR_LOGG': 0.0,&#10;        'Relative_Error_STAR_PMDEC': 0.0,&#10;        'Relative_Error_STAR_PMRA': 0.0,&#10;        'Relative_Error_STAR_RAD': 0.0,&#10;        'Relative_Error_STAR_TEFF': 0.0,&#10;        'Relative_Error_STAR_TMAG': 0.0,&#10;        'koi_fittype_LS+MCMC': 1.0,&#10;        'koi_fittype_MCMC': 0.0,&#10;        'koi_fittype_none': 0.0&#10;    }&#10;    # Ensure all features are present and in correct order&#10;    input_df = pd.DataFrame([custom_input])[features]&#10;    pred = model.predict(input_df)&#10;    pred_label = le.inverse_transform([int(pred[0])])[0]&#10;    print(f&quot;Predicted label: {pred_label}&quot;)&#10;    assert pred_label in le.classes_&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>